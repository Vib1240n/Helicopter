package org.csc133.a1;

import static com.codename1.ui.CN.*;

import com.codename1.charts.util.ColorUtil;
import com.codename1.system.Lifecycle;
import com.codename1.ui.*;
import com.codename1.ui.layouts.*;
import com.codename1.io.*;
import com.codename1.ui.plaf.*;
import com.codename1.ui.util.Resources;
import com.codename1.ui.util.UITimer;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename
 * One</a> for the purpose
 * of building native mobile applications using Java.
 */
public class AppMain extends Lifecycle {
    private Form current;

    @Override
    public void runApp() {
    }

    public void start() {
        if (current != null) {
            current.show();
            return;
        }
        new Game().show();
    }

    public void stop() {
        current = getCurrentForm();
        if (current instanceof Dialog) {
            ((Dialog) current).dispose();
            current = getCurrentForm();
        }
    }

}

class Game extends Form implements Runnable {

    gameWorld world;

    public Game() {
        world = new gameWorld();
        UITimer timer = new UITimer(this);
        timer.schedule(100, true, this);

    }

    public void paint(Graphics g) {
        super.paint(g);
        g.setColor(ColorUtil.BLACK);
        g.fillRect(0, 0, Display.getInstance().getDisplayWidth(), Display.getInstance().getDisplayHeight());
        world.draw(g);
    }

    @Override
    public void run() {
        // TODO Auto-generated method stub

    }

}

class gameWorld {

    Helicopter heli;
    HeliPad pad;

    public gameWorld() {
        heli = new Helicopter();
        pad = new HeliPad();
    }

    public void draw(Graphics g) {
        heli.draw(g);
        pad.draw(g);
    }

}

class Fire {

}

class Helicopter {

    public void draw(Graphics g) {
        // g.drawArc(x, y, width, height, startAngle, arcAngle);
    }
}

class HeliPad {

    public void draw(Graphics g) {
        g.setColor(ColorUtil.GRAY);
        g.drawRect(
                ((Display.getInstance().getDisplayWidth()) / 2) - 100,
                ((Math.min((Display.getInstance().getDisplayHeight()), (Display.getInstance().getDisplayWidth())) / 2)
                        + 1000),
                200, 200);
    }

}

class River {

}
