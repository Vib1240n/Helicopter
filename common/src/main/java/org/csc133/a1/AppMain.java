package org.csc133.a1;

import static com.codename1.ui.CN.*;

import java.util.ArrayList;
import java.util.List;

import javax.print.attribute.standard.DialogTypeSelection;

import com.codename1.charts.util.ColorUtil;
import com.codename1.system.Lifecycle;
import com.codename1.ui.*;
import com.codename1.ui.events.ActionListener;
import com.codename1.ui.geom.Point;
import com.codename1.ui.layouts.*;
import com.codename1.io.*;
import com.codename1.ui.plaf.*;
import com.codename1.ui.util.Resources;
import com.codename1.ui.util.UITimer;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename
 * One</a> for the purpose
 * of building native mobile applications using Java.
 */
public class AppMain extends Lifecycle {
    private Form current;

    @Override
    public void runApp() {
    }

    public void start() {
        if (current != null) {
            current.show();
            return;
        }
        new Game().show();
    }

    public void stop() {
        current = getCurrentForm();
        if (current instanceof Dialog) {
            ((Dialog) current).dispose();
            current = getCurrentForm();
        }
    }

}

class Game extends Form implements Runnable {

    private gameWorld world;
    final static int Disp_H = Display.getInstance().getDisplayHeight();
    final static int Disp_W = Display.getInstance().getDisplayWidth();
    
    public Game() {
        world = new gameWorld();
        UITimer timer = new UITimer(this);
        timer.schedule(100, true, this);
        

    }
    public static int getMin_disp(){
        return Math.min(Disp_H, Disp_W);
    }

    public static int getMax_disp(){
        return Math.max(Disp_H, Disp_W);
    }


    public void paint(Graphics g) {
        super.paint(g);
        g.setColor(ColorUtil.BLACK);
        g.fillRect(0, 0, Game.Disp_W, Game.Disp_H);
        world.draw(g);
    }

    @Override
    public void run() {
        // TODO Auto-generated method stub

    }

    public void addKeyListener(int keyCode, ActionListener listener){

    }

}

class gameWorld {

    Helicopter heli;
    HeliPad pad;
    River river;
    Fire fire;

    public gameWorld() {
        heli = new Helicopter();
        pad = new HeliPad();
        river = new River();
        fire = new Fire();
    }

    public void draw(Graphics g) {
        heli.draw(g);
        pad.draw(g);
        river.draw(g);
        fire.draw(g);        

    }

}



class Fire {
    Point Location;

    public Fire(){
        Location = new Point(Game.Disp_W/2, Game.Disp_H/2);
    }

    public void draw(Graphics g) {
        int radius = 100;

        g.setColor(ColorUtil.MAGENTA);
        g.fillArc(x, y, width, height, 0, 360);

    }

    public int[] UpdateLocation(){
        int[] updateLocation = {0,0};

        return updateLocation;
    } 



}

class Helicopter {
    Point location;

    public Helicopter(){
        location = new Point(Game.Disp_W/2, Game.Disp_H/2);
    }

    public void draw(Graphics g) {

        g.setColor(ColorUtil.YELLOW);
        g.fillArc(location.getX()*(25/100),
                    Game.getMin_disp() / 2
                        + 775, 35, 35, 0, 360);
        
        g.setColor(ColorUtil.YELLOW);
        g.drawLine(Game.Disp_W/2 , Game.Disp_H, Game.Disp_W + 15, Game.Disp_H);
    }
}

class HeliPad {
    Point location;

    public HeliPad(){
        location = new Point(Game.Disp_W / 2, Game.Disp_H / 2);
    }

    public void draw(Graphics g) {
        /*
            Helipad border design
        */
        g.setColor(ColorUtil.GRAY);
        g.drawRect(
                location.getX() - 100,
                ((Game.getMin_disp() / 2) + 700),
                200, 200);
        /*
            Helipad inner circle design 
         */
        g.setColor(ColorUtil.GRAY);
        g.drawArc((Game.Disp_W / 2 ) - 75,
                   ((Game.Disp_H / 2)+725), 
        150, 150,
        0, 360);
    }

}

class River {
    Point Location;     

    public void draw(Graphics g) {

        g.setColor(ColorUtil.BLUE);
        g.drawRect(-100, Game.Disp_W / 8, 
        Game.Disp_W*2 , Game.Disp_H / 8);
    }

}
